Ì¥ß "Web App is Down ‚Äì Troubleshoot and Fix" Ì∑© Scenario

You are the on-call DevOps engineer. A monitoring alert has just reported that the web application is not reachable. Your task is to SSH into the server and troubleshoot the root cause using shell commands. Ì∂•Ô∏è Simulated Environment

I have deployed a simple Flask app using Gunicorn behind an NGINX reverse proxy and manage the app via systemd. This sets up a real-world architecture for practicing: The app is hosted on:

Nginx web server

Hosted on port 80

Backend is a Python Flask app

Logs are stored in /var/log/, /var/www/, and /home/ubuntu/app/

There's a systemd service called flaskapp.service

Ì¥ç Step 1: Check Service Availability

Problem: Website not loading.

Commands:

curl -I http://localhost
netstat -tuln | grep :80
ss -ltnp

Objective: Confirm if the web server (nginx) is listening on port 80.

‚öôÔ∏è Step 2: Check Nginx Service Status

Commands:

systemctl status nginx
sudo journalctl -u nginx --since "10 minutes ago"
sudo tail -n 50 /var/log/nginx/error.log

Objective: Is nginx up and running? Are there any recent errors?

Ì∑µ Step 3: Check Backend Service (Flask App)

Commands:

systemctl status flaskapp.service
sudo journalctl -u flaskapp
ps aux | grep flask
tail -n 50 /home/ubuntu/app/app.log

Objective: Is the Flask backend running? Any logs indicating failure?

Ì¥Ñ Step 4: Restart Services & Monitor

Commands:

sudo systemctl restart flaskapp
sudo systemctl restart nginx
tail -f /var/log/nginx/access.log

Objective: After restart, is the application reachable again?

Ì∑™ Step 5: Check Disk, Memory, and CPU

Commands:

df -h
free -m
top
dmesg | tail

Objective: Are system resources causing the app to crash or be slow?

Ìºê Step 6: Check DNS and Network

Commands:

ping google.com
nslookup yourapp.com
curl -I http://127.0.0.1
ip a


